// –ò–≥—Ä–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let coins = 0;
let tapPower = 1;
let totalTaps = 0;
let playTime = 0;
let startTime = Date.now();

// –£–ª—É—á—à–µ–Ω–∏—è
const upgrades = [
    { id: 1, name: "–£–ª—É—á—à–µ–Ω–Ω—ã–µ –ø–∞–ª—å—Ü—ã", icon: "üëÜ", cost: 100, power: 2, description: "+2 –∫ —Å–∏–ª–µ —Ç–∞–ø–∞" },
    { id: 2, name: "–ó–æ–ª–æ—Ç—ã–µ –ø–µ—Ä—á–∞—Ç–∫–∏", icon: "ü•ä", cost: 500, power: 5, description: "+5 –∫ —Å–∏–ª–µ —Ç–∞–ø–∞" },
    { id: 3, name: "–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫", icon: "‚ö°", cost: 1000, power: 10, description: "+10 –∫ —Å–∏–ª–µ —Ç–∞–ø–∞" },
    { id: 4, name: "–¢—É—Ä–±–æ-—Ä–µ–∂–∏–º", icon: "üöÄ", cost: 5000, power: 25, description: "+25 –∫ —Å–∏–ª–µ —Ç–∞–ø–∞" },
    { id: 5, name: "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π —Ö–æ–º—è–∫", icon: "üèÜ", cost: 20000, power: 100, description: "+100 –∫ —Å–∏–ª–µ —Ç–∞–ø–∞" }
];

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
function initGame() {
    loadGame();
    updateDisplay();
    startPlayTimeCounter();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω –∫–Ω–æ–ø–∫—É –µ—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω
    if (isAdmin()) {
        document.getElementById('adminBtn').style.display = 'block';
    }
    
    renderUpgrades();
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞
function isAdmin() {
    // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Telegram ID
    const adminIds = [1488847693]; // –í–ê–® ID
    return adminIds.includes(1488847693); // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –≤–µ–±-–≤–µ—Ä—Å–∏–∏
}

// –¢–∞–ø –ø–æ —Ö–æ–º—è–∫—É
function tap() {
    coins += tapPower;
    totalTaps++;
    updateDisplay();
    saveGame();
    
    // –ê–Ω–∏–º–∞—Ü–∏—è —Ç–∞–ø–∞
    showTapEffect(tapPower);
}

// –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç —Ç–∞–ø–∞
function showTapEffect(amount) {
    const effect = document.getElementById('tapEffect');
    effect.textContent = `+${amount}`;
    effect.style.animation = 'none';
    void effect.offsetWidth; // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–∏
    effect.style.animation = 'floatUp 1s ease-out';
}

// –ü–æ–∫—É–ø–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è
function buyUpgrade(upgradeId) {
    const upgrade = upgrades.find(u => u.id === upgradeId);
    
    if (!upgrade) return;
    
    if (coins >= upgrade.cost) {
        coins -= upgrade.cost;
        tapPower += upgrade.power;
        updateDisplay();
        saveGame();
        renderUpgrades();
        
        showNotification(`üéâ –ö—É–ø–ª–µ–Ω–æ: ${upgrade.name}!`, 'success');
    } else {
        showNotification('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!', 'error');
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
function showNotification(message, type = 'success') {
    const notification = document.getElementById('notification');
    notification.textContent = message;
    notification.className = `notification ${type} show`;
    
    setTimeout(() => {
        notification.classList.remove('show');
    }, 3000);
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–æ–≤
function showScreen(screenName) {
    // –°–∫—Ä—ã—Ç—å –≤—Å–µ —ç–∫—Ä–∞–Ω—ã
    document.querySelectorAll('.screen').forEach(screen => {
        screen.style.display = 'none';
    });
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –Ω—É–∂–Ω—ã–π —ç–∫—Ä–∞–Ω
    switch(screenName) {
        case 'main':
            document.getElementById('mainScreen').style.display = 'block';
            break;
        case 'upgrades':
            document.getElementById('upgradesScreen').style.display = 'block';
            renderUpgrades();
            break;
        case 'stats':
            document.getElementById('statsScreen').style.display = 'block';
            updateStats();
            break;
        case 'shop':
            document.getElementById('shopScreen').style.display = 'block';
            break;
        case 'admin':
            if (isAdmin()) {
                document.getElementById('adminScreen').style.display = 'block';
                updateAdminStats();
            }
            break;
    }
}

// –†–µ–Ω–¥–µ—Ä —É–ª—É—á—à–µ–Ω–∏–π
function renderUpgrades() {
    const container = document.getElementById('upgradesList');
    container.innerHTML = '';
    
    upgrades.forEach(upgrade => {
        const canAfford = coins >= upgrade.cost;
        const element = document.createElement('div');
        element.className = `upgrade-item ${canAfford ? '' : 'disabled'}`;
        element.onclick = canAfford ? () => buyUpgrade(upgrade.id) : null;
        
        element.innerHTML = `
            <div class="upgrade-icon">${upgrade.icon}</div>
            <div class="upgrade-info">
                <div class="upgrade-name">${upgrade.name}</div>
                <div class="upgrade-desc">${upgrade.description}</div>
            </div>
            <div class="upgrade-price">${upgrade.cost} üí∞</div>
        `;
        
        container.appendChild(element);
    });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function updateStats() {
    document.getElementById('totalCoins').textContent = coins;
    document.getElementById('totalTaps').textContent = totalTaps;
    document.getElementById('totalPower').textContent = tapPower;
    document.getElementById('playTime').textContent = Math.floor(playTime / 60);
}

// –ê–¥–º–∏–Ω —Ñ—É–Ω–∫—Ü–∏–∏
function adminAddCoins(amount) {
    if (!isAdmin()) return;
    
    coins += amount;
    updateDisplay();
    saveGame();
    showNotification(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${amount} –º–æ–Ω–µ—Ç!`);
}

function adminReset() {
    if (!isAdmin()) return;
    
    if (confirm('‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã? –≠—Ç–æ —Å–±—Ä–æ—Å–∏—Ç –≤—Å—é –∏–≥—Ä—É!')) {
        coins = 0;
        tapPower = 1;
        totalTaps = 0;
        playTime = 0;
        startTime = Date.now();
        updateDisplay();
        saveGame();
        showNotification('üîÑ –ò–≥—Ä–∞ —Å–±—Ä–æ—à–µ–Ω–∞!');
    }
}

function updateAdminStats() {
    if (!isAdmin()) return;
    
    const stats = document.getElementById('adminStats');
    stats.innerHTML = `
        <strong>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä—ã:</strong><br>
        ‚Ä¢ –ú–æ–Ω–µ—Ç—ã: ${coins}<br>
        ‚Ä¢ –°–∏–ª–∞ —Ç–∞–ø–∞: ${tapPower}<br>
        ‚Ä¢ –í—Å–µ–≥–æ —Ç–∞–ø–æ–≤: ${totalTaps}<br>
        ‚Ä¢ –í—Ä–µ–º—è –∏–≥—Ä—ã: ${Math.floor(playTime / 60)} –º–∏–Ω.<br>
        ‚Ä¢ –£—Ä–æ–≤–µ–Ω—å: ${Math.floor(tapPower / 5) + 1}
    `;
}

function exportData() {
    if (!isAdmin()) return;
    
    const data = {
        coins: coins,
        tapPower: tapPower,
        totalTaps: totalTaps,
        playTime: playTime
    };
    
    showNotification('üìÅ –î–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞');
    console.log('–î–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã:', data);
}

// –ü–æ–∫—É–ø–∫–∞ –≤ –º–∞–≥–∞–∑–∏–Ω–µ
function buyItem(itemType) {
    switch(itemType) {
        case 'autoTap':
            if (coins >= 500) {
                coins -= 500;
                showNotification('‚ö° –ê–≤—Ç–æ-—Ç–∞–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ 1 –º–∏–Ω—É—Ç—É!');
            } else {
                showNotification('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!', 'error');
            }
            break;
        case 'doubleCoins':
            if (coins >= 1000) {
                coins -= 1000;
                showNotification('üí∞ x2 –ú–æ–Ω–µ—Ç—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ 2 –º–∏–Ω—É—Ç—ã!');
            } else {
                showNotification('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!', 'error');
            }
            break;
    }
    updateDisplay();
    saveGame();
}

// –°—á–µ—Ç—á–∏–∫ –≤—Ä–µ–º–µ–Ω–∏ –∏–≥—Ä—ã
function startPlayTimeCounter() {
    setInterval(() => {
        playTime = Math.floor((Date.now() - startTime) / 1000);
    }, 1000);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∏—Å–ø–ª–µ—è
function updateDisplay() {
    document.getElementById('coins').textContent = coins;
    document.getElementById('power').textContent = tapPower;
    document.getElementById('level').textContent = Math.floor(tapPower / 5) + 1;
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–≥—Ä—ã
function saveGame() {
    const gameData = {
        coins: coins,
        tapPower: tapPower,
        totalTaps: totalTaps,
        playTime: playTime,
        startTime: startTime
    };
    localStorage.setItem('hamsterGame', JSON.stringify(gameData));
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏–≥—Ä—ã
function loadGame() {
    const saved = localStorage.getItem('hamsterGame');
    if (saved) {
        const gameData = JSON.parse(saved);
        coins = gameData.coins || 0;
        tapPower = gameData.tapPower || 1;
        totalTaps = gameData.totalTaps || 0;
        playTime = gameData.playTime || 0;
        startTime = gameData.startTime || Date.now();
    }
}

// –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', initGame);

// –û—Ç–∫–ª—é—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
document.addEventListener('contextmenu', (e) => e.preventDefault());